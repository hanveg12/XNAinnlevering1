using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System.Diagnostics;

namespace Bug
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Random random;

        Texture2D bugart;
        Texture2D GemB, GemO, GemG;
        Vector2[] bug = new Vector2[5];
        SpriteFont Win;
        Vector2 WinPos = new Vector2(400, 400);
        int BugPosition;
        int Gemcase = 0;

        private Rectangle _mouseClicked;

        MouseClass mouseClass;

        int mouseclick = 0;
        

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

           

            
            this.IsMouseVisible = true;
            base.Initialize();
        }
        
        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            random = new Random();
            
            // TODO: use this.Content to load your game content here
            bugart = Content.Load<Texture2D>("Sprites/Enemy Bug");
            GemB = Content.Load<Texture2D>("Sprites/Gem Blue");
            GemG = Content.Load<Texture2D>("Sprites/Gem Green");
            GemO = Content.Load<Texture2D>("Sprites/Gem Orange");
            Win = Content.Load<SpriteFont>("Font/SpriteFontWin");
            BugPos();
            

        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
            
        }

        int passedGameTime = 0;

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
                this.Exit();

            passedGameTime += gameTime.ElapsedGameTime.Milliseconds;

            if (passedGameTime >= 10000)
            {
                passedGameTime = 0;
                SpawnBug();
            }
            
        
        if (mouseClass.MouseClick(_mouseClicked).Equals(true))
            { 
            mouseclick++;
            if (mouseclick >= 20)
            {
                mouseclick = 0;
                Gemcase--;
            }
        }
            // TODO: Add your update logic here
            
            base.Update(gameTime);
        }

        
        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here
            spriteBatch.Begin();
            spriteBatch.Draw(bugart, bug[BugPosition], Color.White);
            
             switch(Gemcase)
             {
                 case 1: spriteBatch.Draw(GemB, new Rectangle(200, 200, 101, 171), Color.White);
                        break;
                    case 2: spriteBatch.Draw(GemG, new Rectangle(300, 300, 101, 171), Color.White);
                        break;
                    case 3:spriteBatch.Draw(GemO, new Rectangle(400,400, 101, 171), Color.White);
                        break;
                    
                    }
            
            spriteBatch.End();

            base.Draw(gameTime);
        }

        public void BugPos()
        {
            bug[0] = new Vector2(100, 100);
            bug[1] = new Vector2(120, 100);
            bug[2] = new Vector2(140, 100);
            bug[3] = new Vector2(160, 100);
            bug[4] = new Vector2(180, 100);
            foreach (Vector2 v in bug)
                Debug.WriteLine(v);
        }
        
        private void SpawnBug()
        {
            int nr1 = random.Next(0, 4);
            BugPosition = nr1;

        }
                  
    
    }
}
       
