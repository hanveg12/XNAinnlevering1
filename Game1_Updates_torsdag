using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Innlevering1
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        public static Random rand;

        

        //private MouseState _prevMouseState;
        //private MouseState _curMouseState;

        private Random random = new Random();

        // Logics
        //private Vector2 _position;
        private int Life = 6;
        private double _spawnCooldown = 1f;
        //private int speedIncrease = 0;
        //private int speed = 200;
        private int spawnOrder = 0;

        // Sprites
        private Texture2D _heartArt;
        //private static Texture2D _something;
        private Rectangle _charBox;
        private Rectangle _prevCharBox;


        //TESTING
        private float WaitTime = 0.3f;




        // dunno what to call it..
        private MouseClass mouseClass;
        private List<GameObject> gameObjects;
        Texture2D[] _characters = new Texture2D[10];
        private List<Rectangle> _hearts = new List<Rectangle>();

        // background textures
        private int stoneBlockHeightOffset;
        private int stoneBlockWidthOffset;
        private Texture2D _brownBlockArt;
        private Texture2D _doorTallClosedArt;
        private Texture2D _roofEastArt;
        private Texture2D _roofWestArt;
        private Texture2D _roofNorthArt;
        private Texture2D _roofSouthArt;
        private Texture2D _roofNorthEastArt;
        private Texture2D _roofNorthWestArt;
        private Texture2D _roofSouthEastArt;
        private Texture2D _roofSouthWestArt;
        private Texture2D _stoneBlockArt;
        private Texture2D _wallBlockTallArt;
        private Texture2D _windowTallArt;


        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            rand = new Random((int)(System.DateTime.Now.Ticks));
            mouseClass = new MouseClass();
            //_position = new Vector2(-110, 270);
            IsMouseVisible = true;

            drawHearts();
            gameObjects = new List<GameObject>();
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            allTheLines();
            allTheCuties();

            //_something = Content.Load<Texture2D>("PlanetCute PNG//Heart");

            _heartArt = Content.Load<Texture2D>("PlanetCute PNG//Heart");


            for (int i = 0; i < 5; i++)
            {
                int nr = random.Next(0,3);
                gameObjects.Add(new GameObject(_characters[nr],new Point(-100,270)));
            }
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // SPEEEEEEEEDDD
            //_position.X += (float)gameTime.ElapsedGameTime.TotalSeconds *  speed + speedIncrease;
            Console.WriteLine(_spawnCooldown);

            _spawnCooldown -= gameTime.ElapsedGameTime.TotalSeconds;
            
            clickCute();
            if (WaitTime > 0)
            {
                WaitTime -= (float)gameTime.ElapsedGameTime.TotalSeconds;
                if (WaitTime < 0)
                {
                    Health();
                    WaitTime = 0.3f;
                }
                
            }
            inGameCharacters();

            // Updates the gameobject class, releaving the movement
            foreach(GameObject gameObject in gameObjects)
            {  
                gameObject.Update();
            }

            // Spawns the cuties
            if (_spawnCooldown <= 0)
            {
                for (int i = 0; i <= spawnOrder; i++)
                {
                    spawnOrder = random.Next(0,4);
                    gameObjects[spawnOrder].deltaPosition = new Point(2, 270);
                    _spawnCooldown = 5f;
                    Console.WriteLine(spawnOrder);
                }

            }
            //gameObjects[1].deltaPosition = new Point(2, 270);
            

            //gameObjects[0].deltaPosition = new Point(3, 270);
            

            //GameObject objekt1 in gameObjects(new Point(4, 270));
            /*foreach (GameObject gameObject in gameObjects)
            {
                gameObject.deltaPosition = new Point( 4, 270);
                gameObject.Update();
            } */
            _prevCharBox = _charBox;
            base.Update(gameTime);
            
        }


        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.White);

            // TODO: Add your drawing code here

            spriteBatch.Begin();

            drawLine1();
            drawLine2();
            drawLine5();
            drawLine4();
            drawLine3();

           //objekt1.Draw(_something, new GameObject(2, 270, _something.Width, _something.Height), Color.White);

            foreach (Rectangle heart in _hearts)
            {
                spriteBatch.Draw(_heartArt, heart, Color.White);
            }

            /*foreach (GameObject gameObject in gameObjects)
            {
                gameObject.Draw(spriteBatch);
            }*/
            gameObjects[1].Draw(spriteBatch);
            gameObjects[0].Draw(spriteBatch);
            //spriteBatch.Draw(_characters[1], _position, Color.White);
           
            
           
            spriteBatch.End();


            base.Draw(gameTime);
        }
        /// <summary>
        /// The losing hearts part of the game
        /// </summary>
        private void Health()
        {

            foreach (GameObject gameObject in gameObjects)
            {
                if (gameObjects[1].getPosition() >= 650 || gameObjects[0].getPosition() >= 650)
                {
                Life--;
                spawnOrder--;
                gameObjects[1].deltaPosition = new Point(-100, 270);
                gameObjects[0].deltaPosition = new Point(-100, 270);
                Console.WriteLine("Health left is: " + (Life-1));
                switch (Life)
                {
                    case 1: _hearts.Remove(new Rectangle(0, -10, 50, 50));
                        Exit();
                        break;
                    case 2: _hearts.Remove(new Rectangle(50, -10, 50, 50));
                        break;
                    case 3: _hearts.Remove(new Rectangle(100, -10, 50, 50));
                        break;
                    case 4: _hearts.Remove(new Rectangle(150, -10, 50, 50));
                        break;
                    case 5: _hearts.Remove(new Rectangle(200, -10, 50, 50));
                        break;
                }
                }   
            }
        }
        private void inGameCharacters() 
        {/*
            if (_spawnCooldown <= 0)
            {
                for (int i = 0; i <= 10; i++)
                {
                   
                    _spawnCooldown = 5f;
                }
                
            }*/
        }
        private void allTheCuties()
        {

            _characters[0] = Content.Load<Texture2D>("PlanetCute PNG//Character Boy");
            _characters[1] = Content.Load<Texture2D>("PlanetCute PNG//Character Cat Girl");
            _characters[2] = Content.Load<Texture2D>("PlanetCute PNG//Character Horn Girl");
            _characters[3] = Content.Load<Texture2D>("PlanetCute PNG//Character Pink Girl");
            _characters[4] = Content.Load<Texture2D>("PlanetCute PNG//Character Princess Girl");
            
            _charBox = _characters[0].Bounds;
            _prevCharBox = _charBox;
            //_charBox.Y = 120; 
        }
        /// <summary>
        /// What happends when you click the little fuckers..
        /// </summary>
        private void clickCute()
        {
            if (mouseClass.MouseClick(_prevCharBox))
            {
                gameObjects[1].deltaPosition = new Point(-100, 270);
            }
        }
        private void allTheLines()
        {
            _brownBlockArt = Content.Load<Texture2D>("PlanetCute PNG//Brown Block");
            _doorTallClosedArt = Content.Load<Texture2D>("PlanetCute PNG//Door Tall Closed");
            _roofEastArt = Content.Load<Texture2D>("PlanetCute PNG//Roof East");
            _roofWestArt = Content.Load<Texture2D>("PlanetCute PNG//Roof West");
            _roofNorthArt = Content.Load<Texture2D>("PlanetCute PNG//Roof North");
            _roofSouthArt = Content.Load<Texture2D>("PlanetCute PNG//Roof South");
            _roofNorthEastArt = Content.Load<Texture2D>("PlanetCute PNG//Roof North East");
            _roofNorthWestArt = Content.Load<Texture2D>("PlanetCute PNG//Roof North West");
            _roofSouthEastArt = Content.Load<Texture2D>("PlanetCute PNG//Roof South East");
            _roofSouthWestArt = Content.Load<Texture2D>("PlanetCute PNG//Roof South West");
            _stoneBlockArt = Content.Load<Texture2D>("PlanetCute PNG//Stone Block");
            _wallBlockTallArt = Content.Load<Texture2D>("PlanetCute PNG//Wall Block Tall");
            _windowTallArt = Content.Load<Texture2D>("PlanetCute PNG//Window Tall");
        }
        /// <summary>
        /// draws the hearts
        /// </summary>
        private void drawHearts()
        {
            _hearts.Add(new Rectangle(0, -10, 50, 50));
            _hearts.Add(new Rectangle(50, -10, 50, 50));
            _hearts.Add(new Rectangle(100, -10, 50, 50));
            _hearts.Add(new Rectangle(150, -10, 50, 50));
            _hearts.Add(new Rectangle(200, -10, 50, 50));
        }


        //Line 1
        private void drawLine1()
        {
            int topRoofHeightOffset = Window.ClientBounds.Height - _roofNorthArt.Bounds.Height - _stoneBlockArt.Bounds.Height - _roofSouthArt.Bounds.Height - 22;
            int topRoofWidthOffset = _roofNorthWestArt.Bounds.Width;
            spriteBatch.Draw(_roofNorthWestArt, new Rectangle(0, topRoofHeightOffset, _roofNorthWestArt.Width, _roofNorthWestArt.Height), Color.White);
            for (int i = 1; i <= 5; i++)
            {
                spriteBatch.Draw(_roofNorthArt, new Rectangle(topRoofWidthOffset, topRoofHeightOffset, _roofNorthArt.Width, _roofNorthArt.Height), Color.White);
                topRoofWidthOffset += _roofNorthArt.Bounds.Width;
            }
            spriteBatch.Draw(_roofNorthEastArt, new Rectangle(topRoofWidthOffset, topRoofHeightOffset, _roofNorthEastArt.Width, _roofNorthEastArt.Height), Color.White);
        }

        //Line2
        private void drawLine2()
        {
            int middleRoofHeightOffset = Window.ClientBounds.Height - _brownBlockArt.Bounds.Height - _stoneBlockArt.Bounds.Height - 113;
            int middleRoofWidthOffset = _roofWestArt.Bounds.Width;
            spriteBatch.Draw(_roofWestArt, new Rectangle(0, middleRoofHeightOffset, _roofWestArt.Width, _roofWestArt.Height), Color.White);
            for (int i = 1; i <= 4; i++)
            {
                spriteBatch.Draw(_brownBlockArt, new Rectangle(middleRoofWidthOffset, middleRoofHeightOffset, _brownBlockArt.Bounds.Width, _brownBlockArt.Bounds.Height), Color.White);
                middleRoofWidthOffset += _brownBlockArt.Bounds.Width;
            }
            spriteBatch.Draw(_roofNorthArt, new Rectangle(middleRoofWidthOffset, middleRoofHeightOffset - 40, _roofNorthArt.Width, _roofNorthArt.Height), Color.White);
            spriteBatch.Draw(_roofEastArt, new Rectangle(middleRoofWidthOffset + _roofNorthArt.Bounds.Width, middleRoofHeightOffset, _roofEastArt.Width, _roofEastArt.Height), Color.White);
        }

        //Line 3
        private void drawLine3()
        {
            int lowerRoofHeightOffset = Window.ClientBounds.Height - _roofSouthArt.Bounds.Height - _stoneBlockArt.Bounds.Height - 30;
            int lowerRoofWidthOffset = _roofSouthWestArt.Bounds.Width;
            spriteBatch.Draw(_roofSouthWestArt, new Rectangle(0, lowerRoofHeightOffset, _roofSouthWestArt.Width, _roofSouthWestArt.Height), Color.White);
            for (int i = 1; i <= 4; i++)
            {
                spriteBatch.Draw(_roofSouthArt, new Rectangle(lowerRoofWidthOffset, lowerRoofHeightOffset, _roofSouthArt.Width, _roofSouthArt.Height), Color.White);
                lowerRoofWidthOffset += _roofSouthArt.Bounds.Width;
            }
            spriteBatch.Draw(_windowTallArt, new Rectangle(lowerRoofWidthOffset, lowerRoofHeightOffset, _windowTallArt.Width, _windowTallArt.Height), Color.White);
            spriteBatch.Draw(_roofSouthEastArt, new Rectangle(lowerRoofWidthOffset + _windowTallArt.Bounds.Width, lowerRoofHeightOffset, _roofSouthEastArt.Width, _roofSouthEastArt.Height), Color.White);
        }

        //Line 4
        private void drawLine4()
        {
            int wallHeightOffset = Window.ClientBounds.Height - _wallBlockTallArt.Bounds.Height - 117;
            int wallWidthOffset = 0;
            for (int i = 1; i <= 5; i++)
            {
                spriteBatch.Draw(_wallBlockTallArt, new Rectangle(wallWidthOffset, wallHeightOffset, _wallBlockTallArt.Width, _wallBlockTallArt.Height), Color.White);
                wallWidthOffset += _wallBlockTallArt.Bounds.Width;
            }
            spriteBatch.Draw(_doorTallClosedArt, new Rectangle(wallWidthOffset, wallHeightOffset + 20, _doorTallClosedArt.Width, _doorTallClosedArt.Height), Color.White);
            wallWidthOffset += _doorTallClosedArt.Bounds.Width;
            spriteBatch.Draw(_wallBlockTallArt, new Rectangle(wallWidthOffset, wallHeightOffset, _wallBlockTallArt.Width, _wallBlockTallArt.Height), Color.White);
        }

        //Line 5
        private void drawLine5()
        {
            stoneBlockHeightOffset = Window.ClientBounds.Height - _stoneBlockArt.Bounds.Height;
            stoneBlockWidthOffset = 0;
            for (int i = 1; i <= 7; i++)
            {
                spriteBatch.Draw(_stoneBlockArt, new Rectangle(stoneBlockWidthOffset, stoneBlockHeightOffset, _stoneBlockArt.Width, _stoneBlockArt.Height), Color.White);
                stoneBlockWidthOffset += _stoneBlockArt.Bounds.Width;
            }
        }

    }
}


